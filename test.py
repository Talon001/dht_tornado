from dht_tornado import dhttornado
import pdb

dhttornado.DHTTree.MAX_LIST_LENGTH = 2

def sb(arr):
    return ''.join(chr(x) for x in arr)


p_id =  sb([0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA])
#0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
op_ip = 0x5555555555555555555555555555555555555555

t = dhttornado.DHTTree(p_id)
#t.insert(sb([0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]))
#Test duplicate ids on the left side
t.insert(sb([0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))
t.insert(sb([0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))
assert(len(t._root.left.value) == 1)

#Try adding another to the left branch
t.insert(sb([0x55,0x51,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))
assert(len(t._root.left.value) == 2)

#Add 2 to the right left right
t.insert(sb([0xAA,0xAA,0xA1,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))
t.insert(sb([0xAA,0xAA,0xA2,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))
assert(len(t._root.right.value) == 2)

#Send one left to right left left
t.insert(sb([0x8A,0xAA,0xA3,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))

assert(len(t._root.right.left.left.value) == 1)
assert(len(t._root.right.left.right.value) == 2)

#Cause an overflow on a branch not going my way
t.insert(sb([0x8A,0xAA,0xA4,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))
assert(len(t._root.right.left.left.value) == 2)
t.insert(sb([0x8A,0xAA,0xA5,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))
assert(len(t._root.right.left.left.value) == 2)

#Cause a split on right left right
t.insert(sb([0xBA,0xAA,0xA2,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]))
assert(len(t._root.right.left.right.left.value) == 2)
assert(len(t._root.right.left.right.right.value) == 1)
pdb.set_trace()

#pdb.set_trace()
#assert(len(t._root.right.value) == 2)

#pdb.set_trace()

#assert(len(t._root.left.value) == 2)
#assert(len(t._root.right.value) == 3)

#t.insert(0xAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
#t.insert(0xAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
#t.insert(0xAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)


